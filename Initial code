/* *****************
* Basic calculator
* (-+/*)
*******************/


#include <stdio.h>
#include <stdlib.h>

int inputParser(double **digitArray, char **mathsFunctionArray,int *fCounter);

int main()
{
    int functionLocation,i, Counter=0,*fCounter=NULL,FCOUNTER,vCounter=0;
    double *variables=NULL, answer;
    char *function=NULL,input[100], *parsed,Test;

    fCounter=&FCOUNTER;
    //allow variable number of input



    if(inputParser(&variables,&function,fCounter)!=0)
    {
        return(1);
    }
    //get user input
    //Outputs the required quations to the screen
    answer=variables[0];
    for(i=0;i<(*fCounter);i++)
    {
        switch(function[i])
        {
            case '+': answer+=variables[i+1]; break;
            case '-': answer-=variables[i+1]; break;
            case '*': answer=answer*variables[i+1];break;
            case '/': if(variables[1]!=0){answer=answer/variables[i+1];} else{ printf("Divide by zero error\n"); free(variables); free(function); return(1);}break;
            default : printf("Inputs not recognised.\n"); break;
        }
    }
printf("%lf\n",answer);
free(variables);
free(function);

return(0);
}

int inputParser(double **digitArray, char **mathsFunctionArray,int *functionCounter)
{
    int Counter=0,vCounter=0,fCounter=0;
    double *variables=NULL;
    char *function=NULL,input[100], *parsed,Test;
    fCounter=0;
     if((variables=calloc(1,sizeof(double)))==NULL)
    {
        printf("Memory allocation failed - Variables");
        return(1);
    }
    if((function=calloc(1,sizeof(char)))==NULL)
    {
        printf("Memory allocation failed - Functions");
        return(1);

    }

    //get user input
    printf("Calculator. Please enter the equation.\n");
    fgets(input,sizeof(input),stdin);

    //determine first number, determine function, determine second number
    parsed=input;
    while((Test=*parsed)!='\n' && Test!=EOF )
    {
        // Determines if character is a digit, if yes it converts the digits into a number.
        // If no it stores the character in a separate array.
        if(isdigit(*parsed))
        {
            variables[Counter]=strtod(parsed,&parsed);
            Counter++;
            if((variables=realloc(variables,Counter*(sizeof(double))+sizeof(double)))==NULL)
               {
                   printf("Memory reallocation failed - Variables");
                   free(variables);
                   free(function);
                   return(1);
               }
        }
        else
        {
            if((function=realloc(function,fCounter*sizeof(char)+sizeof(char)))==NULL)
               {
                   printf("Memory reallocation failed - Functions");
                   free(function);
                   free(variables);
                   return(1);
               }

            // Switch used to prevent entries which are not mathematical functions.
            function[fCounter]=*parsed;

            switch(function[fCounter])
            {
            case '+':
            case '-':
            case '/':
            case '*':
            case '^':
            case '(':
            case ')': fCounter++; parsed++; break;
            default:{
                printf("Invalid entry.\n");
                free(function);
                free(variables);
                return(1);
                break;
                }
            }
        }
    }

    *functionCounter=fCounter;
    *digitArray=variables;
    *mathsFunctionArray=function;
    return(0);
}
